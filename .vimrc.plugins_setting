"-------------------------------------------------------------------------------
" プラグインごとの設定 Plugins
"-------------------------------------------------------------------------------

"------------------------------------
" VimFiler
" ? //ヘルプ
" q //終了
" <Space> //マーク
" m //マークしたファイルを移動
" c //マークしたファイルをコピー
" d //マークしたファイルを削除
" p //ペースト
" * //すべてをマーク
" ~ //ホームへ移動
" / //ルートに移動
" L //ドライブに移動
" J //ジャンプ
" l //Enter
" t //ツリーを開く
" o //新しいウィンドウ
" K //新しいフォルダを作る
" N //新しいファイルを作る
" x //関連付けられたコマンドを実行する
" a //メニューを開く
" H //VimShellを開く
" ge //エクスプローラで開く
" gr //grep
" gf //find
" TAB //2面ファイラーにする
"------------------------------------
" デフォルトエクスプローラを置き換える
let g:vimfiler_as_default_explorer = 1
" セーフモードオフで起動
let g:vimfiler_safe_mode_by_default = 0
" 開く
map <Leader>e ;VimFiler<CR>
autocmd FileType vimfiler call unite#custom_default_action('directory', 'cd')

"------------------------------------
" Align
"------------------------------------
" Alignを日本語環境で使用するための設定
let g:Align_xstrlen = 3

"------------------------------------
" NERD_commenter.vim
"------------------------------------
" コメントの間にスペースを空ける
let NERDSpaceDelims = 1
" ,c<space>でコメントをトグル(NERD_commenter.vim)
""未対応ファイルタイプのエラーメッセージを表示しない
let NERDShutUp=1

" ------------------------------------
" grep.vim
"------------------------------------
" 検索外のディレクトリ、ファイルパターン
let Grep_Skip_Dirs = '.svn .git .hg'
let Grep_Skip_Files = '*.bak *~'

"------------------------------------
" smartchr.vim
"------------------------------------
inoremap <expr> = smartchr#loop('= ', '== ', '===', '=' )
inoremap <buffer><expr> = search('¥(&¥<bar><bar>¥<bar>+¥<bar>-¥<bar>/¥<bar>>¥<bar><¥) ¥%#', 'bcn')? '<bs>= '  : search('¥(*¥<bar>!¥)¥%#', 'bcn') ? '= '  : smartchr#one_of(' = ', ' == ', ' === ', '=')

" 下記の文字は連続して現れることがまれなので、二回続けて入力したら改行する
inoremap <buffer><expr> } smartchr#one_of('}', '}<cr>')
inoremap <buffer><expr> ; smartchr#one_of(';', ';<cr>')
"()は即座に補完
inoremap <buffer><expr> ( smartchr#one_of(')')
" inoremap <buffer><expr> ) smartchr#one_of(' )')

" if文直後の(は自動で間に空白を入れる
inoremap <buffer><expr> ( search('¥<¥if¥%#', 'bcn')? ' (': '('

"------------------------------------
" Fugitive.vim
"------------------------------------
nnoremap <Leader>gd :<C-u>Gdiff<Enter>
nnoremap <Leader>gs :<C-u>Gstatus<Enter>
nnoremap <Leader>gl :<C-u>Glog<Enter>
nnoremap <Leader>ga :<C-u>Gwrite<Enter>
nnoremap <Leader>gc :<C-u>Gcommit<Enter>
nnoremap <Leader>gC :<C-u>Git commit --amend<Enter>
nnoremap <Leader>gb :<C-u>Gblame<Enter>

"------------------------------------
" Gundo
"------------------------------------
nmap U :<C-u>GundoToggle<CR>

"------------------------------------
" vim-indent-guides
"------------------------------------
nnoremap <silent> <Space>id :<C-u>IndentGuidesToggle<Enter>
let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level = 4
let g:indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
if 'dark' == &background
    hi IndentGuidesOdd  ctermbg=black
    hi IndentGuidesEven ctermbg=darkgrey
else
    hi IndentGuidesOdd  ctermbg=white
    hi IndentGuidesEven ctermbg=lightgrey
endif


"------------------------------------
" taglist.Vim
"------------------------------------
" 関数一覧
set tags=tags
"set tags+=~/.tags
"let Tlist_Ctags_Cmd = '/Applications/MacVim.app/Contents/MacOS/ctags' " ctagsのパス
let Tlist_Show_One_File = 1               " 現在編集中のソースのタグしか表示しない
let Tlist_Exit_OnlyWindow = 1             " taglistのウィンドーが最後のウィンドーならばVimを閉じる
" let Tlist_Use_Right_Window = 1            " 右側でtaglistのウィンドーを表示
let Tlist_Enable_Fold_Column = 1          " 折りたたみ
"let Tlist_Auto_Open = 1                   " 自動表示
let Tlist_Auto_Update = 1
let Tlist_WinWidth = 30
"map <silent> <leader>tl :Tlist<CR>        " taglistを開くショットカットキー
nmap <F7> :CMiniBufExplorer<CR>:TrinityToggleTagList<CR>:TMiniBufExplorer<CR>
nmap <Leader>tl :CMiniBufExplorer<CR>:TrinityToggleTagList<CR>:TMiniBufExplorer<CR>

"------------------------------------
" open-blowser.vim
"------------------------------------
" カーソル下のURLをブラウザで開く
nmap <Leader>ou <Plug>(openbrowser-open)
vmap <Leader>ou <Plug>(openbrowser-open)
" カーソル下のキーワードをググる
nnoremap <Leader>os :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>

"------------------------------------
" camelcasemotion.vim
"------------------------------------

" <Shift-wbe>でCameCaseやsnake_case単位での単語移動
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
" text-objectで使用できるように
omap <silent> iw <Plug>CamelCaseMotion_iw
xmap <silent> iw <Plug>CamelCaseMotion_iw
omap <silent> ib <Plug>CamelCaseMotion_ib
xmap <silent> ib <Plug>CamelCaseMotion_ib
omap <silent> ie <Plug>CamelCaseMotion_ie
xmap <silent> ie <Plug>CamelCaseMotion_ie

"------------------------------------
" errormarker.vim
"------------------------------------
" disable default shortcut mapping and re-define to <Leader>ec
let g:errormarker_disablemappings = 1
nmap <silent> <unique> <Leader>ec :ErrorAtCursor<CR>

"------------------------------------
" unite.vim
"------------------------------------
" unite grep に ag(The Silver Searcher) を使う
if executable('ag')
  let g:unite_source_grep_command =  'ag'
  let g:unite_source_grep_default_opts =  '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt =  ''
endif

nnoremap [unite] <Nop>
nmap f [unite]

nnoremap [unite]f :<C-u>Unite buffer<CR>
nnoremap [unite]a :<C-u>Unite buffer_tab<CR>
nnoremap [unite]t :<C-u>Unite tab<CR>
nnoremap [unite]d :<C-u>Unite file<CR>
nnoremap [unite]g :<C-u>Unite grep<CR>
nnoremap [unite]l :<C-u>Unite line<CR>
nnoremap [unite]y :<C-u>Unite history/yank -default-action=append<CR>
nnoremap [unite]b :<C-u>Unite bookmark<CR>

"------------------------------------
" quickrun.vim
"------------------------------------
let g:quickrun_config = {}
let g:quickrun_config._ = {
  \ 'runner' : 'vimproc',
  \ 'runner/vimproc/updatetime' : '40',
  \ 'outputter/buffer/split' : ':botright 8sp'
  \}
let g:quickrun_config['rspec/bundle'] = {
  \ 'type': 'rspec/bundle',
  \ 'command': "rspec",
  \ 'cmdopt': "-l %{line('.')}",
  \ 'exec': "bundle exec %c %o %s ",
  \ 'filetype': 'rspec-result'
  \}
let g:quickrun_config['rspec/normal'] = {
  \ 'type': 'rspec/normal',
  \ 'command': "rspec",
  \ 'cmdopt': "-l %{line('.')}",
  \ 'exec': '%c %o %s',
  \ 'filetype': 'rspec-result'
  \}
let g:quickrun_config.markdown = {
  \ 'outputter' : 'null',
  \ 'command'   : 'open',
  \ 'cmdopt'    : '-a',
  \ 'args'      : '"Marked 2"',
  \ 'exec'      : '%c %o %a %s',
  \ }
function! RSpecQuickrun()
  let b:quickrun_config = {'type' : 'rspec/bundle'}
endfunction
autocmd BufReadPost *_spec.rb call RSpecQuickrun()

"------------------------------------
" Syntastic
"------------------------------------
" エラー行をsignで表示する
let g:syntastic_enable_signs = 1
" 可能ならhighligt表示する
let g:syntastic_enable_highlighting = 1

